# License: GNU Affero General Public License v3 or later
# A copy of GNU AGPL v3 should have been included in this software package in LICENSE.txt.

"""reserves/creates some cmdline options that we need placeholders for"""

from typing import Any, Dict, List, Optional

from antismash.config import ConfigType
from antismash.config.args import ModuleArgs
from antismash.common.secmet import Record
from antismash.common.module_results import ModuleResults

NAME = "dummy"
SHORT_DESCRIPTION = "options placeholders and base example"

# because this module has a lot of stubbed functions, quiet the pylint warnings
# about unused arguments
# pylint: disable=unused-argument


def get_arguments() -> ModuleArgs:
    """ Sets up arguments for this module. Must return a ModuleArgs object.

        override_safeties is only set here to allow for the destinations of the
        arguments to not include the 'dummy' prefix for the placeholder
        arguments.
    """
    args = ModuleArgs('Dummy options', '', override_safeties=True)
    args.add_option('--dummy-without-fimo',
                    dest='without_fimo',
                    action='store_true',
                    default=False,
                    help="Dummy only.")
    return args


def check_options(options: ConfigType) -> List[str]:
    """ Check the options of this module for any conflicting or invalid values.

        Arguments:
            options: the options parsed by the main entry point as an
                     antismash.Config object

        Returns:
            a list of strings describing any errors, if they exist
    """
    # because the placeholders are special, raise an error if they're used
    if options.without_fimo:
        raise ValueError("Dummy options can't be enabled")
    return []


def check_prereqs() -> List[str]:
    """ Check that prerequisites datafiles and executables are available

        Returns:
            a list of strings describing any errors, if they occurred
    """
    # No external dependencies
    return []


def is_enabled(options: ConfigType) -> bool:
    """ Returns True if this module should be run based on the options provided
    """
    # since this is largely a placeholder or demo, it is never enabled
    return False


def regenerate_previous_results(previous: Dict[str, Any], record: Record, options: ConfigType) -> ModuleResults:
    """ Rebuild the previous run results from a JSON object into this module's
        python results class. If the current options are incompatible with the
        previous results, None should be returned.

        The module result class should inherit from
            antismash.common.module_results.ModuleResults

        This module doesn't ever run, so it doesn't have any results to
        regenerate.

        Arguments:
            previous: the previous results as a dictionary
            record: the Record that was used to generate the previous results
            options: an antismash.Config object
    """
    return None


def run_on_record(record: Record, results: Optional[ModuleResults], options: ConfigType) -> ModuleResults:
    """ Run this module's analysis section on the given record or use the
        previous results.

        Arguments:
            record: the Record instance to analyse
            results: the previous results as generated by regenerate_previous_results()
            options: an antismash.Config object

        Returns:
            this module's results as a subclass of
                antismash.common.module_results.ModuleResults
    """
    raise NotImplementedError("Dummy module should never be run")
